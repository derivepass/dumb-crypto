//! # Hmac
//!
//! Implementation of HMac SHA256 message authentication algorithm according to
//! [RFC 2104][rfc].
//!
//! [rfc]: https://tools.ietf.org/html/rfc2104#section-2
//!

use crate::sha256::{BLOCK_SIZE, DIGEST_SIZE, SHA256};

///
/// Main hmac-sha256 structure.
///
/// Usage:
/// ```rust
/// extern crate dumb_crypto;
///
/// use::dumb_crypto::hmac::HMac;
///
/// let mut hmac = HMac::new(b"secret key");
///
/// hmac.update(b"hello world");
/// assert_eq!(hmac.digest().to_vec(), vec![
///     0xc6, 0x1b, 0x51, 0x98, 0xdf, 0x58, 0x63, 0x9e,
///     0xdb, 0x98, 0x92, 0x51, 0x47, 0x56, 0xb8, 0x9a,
///     0x36, 0x85, 0x6d, 0x82, 0x6e, 0x5d, 0x85, 0x02,
///     0x3a, 0xb1, 0x81, 0xb4, 0x8e, 0xa5, 0xd0, 0x18,
/// ]);
/// ```
///
pub struct HMac {
    inner: SHA256,
    outer: SHA256,
}

// See https://tools.ietf.org/html/rfc2104#section-2

impl HMac {
    ///
    /// Create new instance of Hmac-sha256 message authentication.
    ///
    /// Arguments:
    ///
    /// - `key` - secret key
    ///
    pub fn new(key: &[u8]) -> HMac {
        //
        //                ipad = the byte 0x36 repeated B times
        //                opad = the byte 0x5C repeated B times.
        //
        //   To compute HMAC over the data `text' we perform
        //
        //                    H(K XOR opad, H(K XOR ipad, text))
        //
        //   Namely,
        //
        //    (1) append zeros to the end of K to create a B byte string
        //        (e.g., if K is of length 20 bytes and B=64, then K will be
        //         appended with 44 zero bytes 0x00)
        //    (2) XOR (bitwise exclusive-OR) the B byte string computed in step
        //        (1) with ipad
        //    (3) append the stream of data 'text' to the B byte string resulting
        //        from step (2)
        //    (4) apply H to the stream generated in step (3)
        //    (5) XOR (bitwise exclusive-OR) the B byte string computed in
        //        step (1) with opad
        //    (6) append the H result from step (4) to the B byte string
        //        resulting from step (5)
        //    (7) apply H to the stream generated in step (6) and output
        //        the result
        //

        // Hash the key to fit it into the block
        if key.len() > BLOCK_SIZE {
            let mut tmp = SHA256::new();
            tmp.update(key);
            return HMac::new(&tmp.digest());
        }

        let mut block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];

        let mut inner = SHA256::new();
        let mut outer = SHA256::new();

        block[..key.len()].copy_from_slice(key);

        for elem in block.iter_mut() {
            *elem ^= 0x36;
        }
        inner.update(&block);

        /* NOTE: a ^ b ^ b ^ c = a ^ c */
        for elem in block.iter_mut() {
            *elem ^= 0x36 ^ 0x5c;
        }
        outer.update(&block);

        HMac { inner, outer }
    }

    ///
    /// Add input `data` to the digest.
    ///
    pub fn update(self: &mut HMac, data: &[u8]) {
        self.inner.update(data);
    }

    ///
    /// Generate digest array.
    ///
    pub fn digest(self: &mut HMac) -> [u8; DIGEST_SIZE] {
        self.outer.update(&self.inner.digest());
        self.outer.digest()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn check(key: &[u8], inputs: &[&[u8]], expected: [u8; DIGEST_SIZE]) {
        let mut hmac = HMac::new(key);

        for chunk in inputs {
            hmac.update(chunk);
        }
        assert_eq!(hmac.digest(), expected);
    }

    //
    // See https://tools.ietf.org/html/rfc4231
    //

    #[test]
    fn it_should_compute_digest_for_vec0() {
        check(
            b"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
            &[b"Hi There"],
            [
                0xb0, 0x34, 0x4c, 0x61, 0xd8, 0xdb, 0x38, 0x53, 0x5c, 0xa8, 0xaf, 0xce, 0xaf, 0x0b,
                0xf1, 0x2b, 0x88, 0x1d, 0xc2, 0x00, 0xc9, 0x83, 0x3d, 0xa7, 0x26, 0xe9, 0x37, 0x6c,
                0x2e, 0x32, 0xcf, 0xf7,
            ],
        );
    }

    #[test]
    fn it_should_compute_digest_for_vec1() {
        check(
            b"Jefe",
            &[b"what do ya want ", b"for nothing?"],
            [
                0x5b, 0xdc, 0xc1, 0x46, 0xbf, 0x60, 0x75, 0x4e, 0x6a, 0x04, 0x24, 0x26, 0x08, 0x95,
                0x75, 0xc7, 0x5a, 0x00, 0x3f, 0x08, 0x9d, 0x27, 0x39, 0x83, 0x9d, 0xec, 0x58, 0xb9,
                0x64, 0xec, 0x38, 0x43,
            ],
        );
    }

    #[test]
    fn it_should_compute_digest_for_vec2() {
        check(
            &[
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            ],
            &[
                &[
                    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
                    0xdd, 0xdd, 0xdd,
                ],
                &[
                    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
                    0xdd, 0xdd, 0xdd,
                ],
                &[
                    0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
                    0xdd, 0xdd, 0xdd,
                ],
                &[0xdd, 0xdd],
            ],
            [
                0x77, 0x3e, 0xa9, 0x1e, 0x36, 0x80, 0x0e, 0x46, 0x85, 0x4d, 0xb8, 0xeb, 0xd0, 0x91,
                0x81, 0xa7, 0x29, 0x59, 0x09, 0x8b, 0x3e, 0xf8, 0xc1, 0x22, 0xd9, 0x63, 0x55, 0x14,
                0xce, 0xd5, 0x65, 0xfe,
            ],
        );
    }

    #[test]
    fn it_should_compute_digest_for_vec3() {
        check(
            &[
                0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
                0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
            ],
            &[
                &[
                    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
                    0xcd, 0xcd, 0xcd,
                ],
                &[
                    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
                    0xcd, 0xcd, 0xcd,
                ],
                &[
                    0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
                    0xcd, 0xcd, 0xcd,
                ],
                &[0xcd, 0xcd],
            ],
            [
                0x82, 0x55, 0x8a, 0x38, 0x9a, 0x44, 0x3c, 0x0e, 0xa4, 0xcc, 0x81, 0x98, 0x99, 0xf2,
                0x08, 0x3a, 0x85, 0xf0, 0xfa, 0xa3, 0xe5, 0x78, 0xf8, 0x07, 0x7a, 0x2e, 0x3f, 0xf4,
                0x67, 0x29, 0x66, 0x5b,
            ],
        );
    }

    #[test]
    fn it_should_compute_digest_for_vec4() {
        check(
            &[
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            ],
            &[
                b"Test Using Large",
                b"r Than Block-Siz",
                b"e Key - Hash Key",
                b" First",
            ],
            [
                0x60, 0xe4, 0x31, 0x59, 0x1e, 0xe0, 0xb6, 0x7f, 0x0d, 0x8a, 0x26, 0xaa, 0xcb, 0xf5,
                0xb7, 0x7f, 0x8e, 0x0b, 0xc6, 0x21, 0x37, 0x28, 0xc5, 0x14, 0x05, 0x46, 0x04, 0x0f,
                0x0e, 0xe3, 0x7f, 0x54,
            ],
        );
    }

    #[test]
    fn it_should_compute_digest_for_vec5() {
        check(
            &[
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
                0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
            ],
            &[
                b"This is a test u",
                b"sing a larger th",
                b"an block-size ke",
                b"y and a larger t",
                b"han block-size d",
                b"ata. The key nee",
                b"ds to be hashed ",
                b"before being use",
                b"d by the HMAC al",
                b"gorithm.",
            ],
            [
                0x9b, 0x09, 0xff, 0xa7, 0x1b, 0x94, 0x2f, 0xcb, 0x27, 0x63, 0x5f, 0xbc, 0xd5, 0xb0,
                0xe9, 0x44, 0xbf, 0xdc, 0x63, 0x64, 0x4f, 0x07, 0x13, 0x93, 0x8a, 0x7f, 0x51, 0x53,
                0x5c, 0x3a, 0x35, 0xe2,
            ],
        );
    }

    //
    // Just random tests
    //

    #[test]
    fn it_should_compute_pbkdf2_stage_properly() {
        check(
            &[0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
            &[&[
                0xc6, 0x00, 0x40, 0x4e, 0x39, 0xc9, 0xe9, 0x7a, 0x7d, 0x7a, 0x74, 0x5b, 0x32, 0xc3,
                0xe7, 0x42, 0x63, 0x87, 0xb3, 0x65, 0x69, 0x3c, 0x7f, 0x59, 0x30, 0x0f, 0xd8, 0xa0,
                0x3a, 0xab, 0x4c, 0x6e,
            ]],
            [
                0xbe, 0x97, 0xc8, 0x11, 0x49, 0x75, 0x0f, 0x47, 0x65, 0x9a, 0x37, 0xf6, 0x23, 0x00,
                0x43, 0xf5, 0x79, 0xb5, 0xd8, 0x35, 0xac, 0xdd, 0xfc, 0x8e, 0x70, 0xd7, 0x4a, 0xef,
                0x66, 0x95, 0xe1, 0x28,
            ],
        );
    }
}
